,Dataset,Time,Preprocessing,AutoML,Accuracy,F1,Shape,PipeLine
0,vehicle_sensIT,62.95m,AutoFeat,TPOT,0.8640579144812733,0.8645664176680741,"(98528, 53)","import numpy as np
import pandas as pd
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.model_selection import train_test_split

# NOTE: Make sure that the outcome column is labeled 'target' in the data file
tpot_data = pd.read_csv('PATH/TO/DATA/FILE', sep='COLUMN_SEPARATOR', dtype=np.float64)
features = tpot_data.drop('target', axis=1)
training_features, testing_features, training_target, testing_target = \
            train_test_split(features, tpot_data['target'], random_state=None)

# Average CV score on the training set was: 0.865351340146265
exported_pipeline = ExtraTreesClassifier(bootstrap=True, criterion=""gini"", max_features=0.55, min_samples_leaf=18, min_samples_split=12, n_estimators=100)

exported_pipeline.fit(training_features, training_target)
results = exported_pipeline.predict(testing_features)
"
1,vehicle_sensIT,62.95m,None,TPOT,0.8670817810878048,0.8674894446248782,"(98528, 100)","import numpy as np
import pandas as pd
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.model_selection import train_test_split

# NOTE: Make sure that the outcome column is labeled 'target' in the data file
tpot_data = pd.read_csv('PATH/TO/DATA/FILE', sep='COLUMN_SEPARATOR', dtype=np.float64)
features = tpot_data.drop('target', axis=1)
training_features, testing_features, training_target, testing_target = \
            train_test_split(features, tpot_data['target'], random_state=None)

# Average CV score on the training set was: 0.8691133828208313
exported_pipeline = ExtraTreesClassifier(bootstrap=False, criterion=""entropy"", max_features=0.25, min_samples_leaf=5, min_samples_split=12, n_estimators=100)

exported_pipeline.fit(training_features, training_target)
results = exported_pipeline.predict(testing_features)
"
2,vehicle_sensIT,62.95m,TPOT,TPOT,0.8608655914737975,0.8612780123416693,"(98528, 100)","import numpy as np
import pandas as pd
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.model_selection import train_test_split
from sklearn.pipeline import make_pipeline, make_union
from sklearn.tree import DecisionTreeClassifier
from tpot.builtins import StackingEstimator

# NOTE: Make sure that the outcome column is labeled 'target' in the data file
tpot_data = pd.read_csv('PATH/TO/DATA/FILE', sep='COLUMN_SEPARATOR', dtype=np.float64)
features = tpot_data.drop('target', axis=1)
training_features, testing_features, training_target, testing_target = \
            train_test_split(features, tpot_data['target'], random_state=None)

# Average CV score on the training set was: 0.8630913968280158
exported_pipeline = make_pipeline(
    StackingEstimator(estimator=ExtraTreesClassifier(bootstrap=True, criterion=""entropy"", max_features=0.05, min_samples_leaf=16, min_samples_split=5, n_estimators=100)),
    DecisionTreeClassifier(criterion=""gini"", max_depth=4, min_samples_leaf=7, min_samples_split=13)
)

exported_pipeline.fit(training_features, training_target)
results = exported_pipeline.predict(testing_features)
"
