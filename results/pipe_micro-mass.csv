,Dataset,Time,Preprocessing,AutoML,Accuracy,F1,Shape,PipeLine
0,micro-mass,61.27m,AutoFeat,TPOT,0.5396625709597936,0.5734265734265734,"(571, 17)","import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

# NOTE: Make sure that the outcome column is labeled 'target' in the data file
tpot_data = pd.read_csv('PATH/TO/DATA/FILE', sep='COLUMN_SEPARATOR', dtype=np.float64)
features = tpot_data.drop('target', axis=1)
training_features, testing_features, training_target, testing_target = \
            train_test_split(features, tpot_data['target'], random_state=None)

# Average CV score on the training set was: 0.6494938440492476
exported_pipeline = RandomForestClassifier(bootstrap=False, criterion=""entropy"", max_features=0.05, min_samples_leaf=1, min_samples_split=15, n_estimators=100)

exported_pipeline.fit(training_features, training_target)
results = exported_pipeline.predict(testing_features)
"
1,micro-mass,61.27m,None,TPOT,0.9142550411537076,0.916083916083916,"(571, 1300)","import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import BernoulliNB

# NOTE: Make sure that the outcome column is labeled 'target' in the data file
tpot_data = pd.read_csv('PATH/TO/DATA/FILE', sep='COLUMN_SEPARATOR', dtype=np.float64)
features = tpot_data.drop('target', axis=1)
training_features, testing_features, training_target, testing_target = \
            train_test_split(features, tpot_data['target'], random_state=None)

# Average CV score on the training set was: 0.8901231190150478
exported_pipeline = BernoulliNB(alpha=0.1, fit_prior=True)

exported_pipeline.fit(training_features, training_target)
results = exported_pipeline.predict(testing_features)
"
2,micro-mass,61.27m,TPOT,TPOT,0.9199397190861609,0.9230769230769231,"(571, 1300)","import numpy as np
import pandas as pd
from sklearn.linear_model import SGDClassifier
from sklearn.model_selection import train_test_split
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import Binarizer

# NOTE: Make sure that the outcome column is labeled 'target' in the data file
tpot_data = pd.read_csv('PATH/TO/DATA/FILE', sep='COLUMN_SEPARATOR', dtype=np.float64)
features = tpot_data.drop('target', axis=1)
training_features, testing_features, training_target, testing_target = \
            train_test_split(features, tpot_data['target'], random_state=None)

# Average CV score on the training set was: 0.9135704514363885
exported_pipeline = make_pipeline(
    Binarizer(threshold=0.0),
    SGDClassifier(alpha=0.0, eta0=0.01, fit_intercept=True, l1_ratio=0.25, learning_rate=""constant"", loss=""modified_huber"", penalty=""elasticnet"", power_t=1.0)
)

exported_pipeline.fit(training_features, training_target)
results = exported_pipeline.predict(testing_features)
"
