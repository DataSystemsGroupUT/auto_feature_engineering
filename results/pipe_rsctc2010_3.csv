,Dataset,Time,Preprocessing,AutoML,Accuracy,F1,Shape,PipeLine
0,rsctc2010_3,78.37m,AutoFeat,TPOT,0.8768518518518519,0.875,"(95, 12)","import numpy as np
import pandas as pd
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.model_selection import train_test_split

# NOTE: Make sure that the outcome column is labeled 'target' in the data file
tpot_data = pd.read_csv('PATH/TO/DATA/FILE', sep='COLUMN_SEPARATOR', dtype=np.float64)
features = tpot_data.drop('target', axis=1)
training_features, testing_features, training_target, testing_target = \
            train_test_split(features, tpot_data['target'], random_state=None)

# Average CV score on the training set was: 0.9304761904761906
exported_pipeline = GradientBoostingClassifier(learning_rate=0.1, max_depth=9, max_features=0.3, min_samples_leaf=7, min_samples_split=9, n_estimators=100, subsample=0.7500000000000001)

exported_pipeline.fit(training_features, training_target)
results = exported_pipeline.predict(testing_features)
"
1,rsctc2010_3,78.37m,None,TPOT,0.915954415954416,0.9166666666666666,"(95, 22277)","import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import LinearSVC

# NOTE: Make sure that the outcome column is labeled 'target' in the data file
tpot_data = pd.read_csv('PATH/TO/DATA/FILE', sep='COLUMN_SEPARATOR', dtype=np.float64)
features = tpot_data.drop('target', axis=1)
training_features, testing_features, training_target, testing_target = \
            train_test_split(features, tpot_data['target'], random_state=None)

# Average CV score on the training set was: 0.9580952380952381
exported_pipeline = LinearSVC(C=15.0, dual=True, loss=""hinge"", penalty=""l2"", tol=0.1)

exported_pipeline.fit(training_features, training_target)
results = exported_pipeline.predict(testing_features)
"
2,rsctc2010_3,78.37m,TPOT,TPOT,0.9574074074074074,0.9583333333333334,"(95, 22277)","import numpy as np
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

# NOTE: Make sure that the outcome column is labeled 'target' in the data file
tpot_data = pd.read_csv('PATH/TO/DATA/FILE', sep='COLUMN_SEPARATOR', dtype=np.float64)
features = tpot_data.drop('target', axis=1)
training_features, testing_features, training_target, testing_target = \
            train_test_split(features, tpot_data['target'], random_state=None)

# Average CV score on the training set was: 0.8742857142857143
exported_pipeline = LogisticRegression(C=0.001, dual=False, penalty=""l2"")

exported_pipeline.fit(training_features, training_target)
results = exported_pipeline.predict(testing_features)
"
