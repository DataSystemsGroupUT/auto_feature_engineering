,Dataset,Time,Preprocessing,AutoML,Accuracy,F1,Shape,PipeLine
0,dbworld-bodies,61.02m,AutoFeat,TPOT,0.9377450980392157,0.9375,"(64, 4)","import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB

# NOTE: Make sure that the outcome column is labeled 'target' in the data file
tpot_data = pd.read_csv('PATH/TO/DATA/FILE', sep='COLUMN_SEPARATOR', dtype=np.float64)
features = tpot_data.drop('target', axis=1)
training_features, testing_features, training_target, testing_target = \
            train_test_split(features, tpot_data['target'], random_state=None)

# Average CV score on the training set was: 0.9155555555555555
exported_pipeline = MultinomialNB(alpha=0.1, fit_prior=True)

exported_pipeline.fit(training_features, training_target)
results = exported_pipeline.predict(testing_features)
"
1,dbworld-bodies,61.02m,None,TPOT,0.936740890688259,0.9375,"(64, 4702)","import numpy as np
import pandas as pd
from sklearn.linear_model import SGDClassifier
from sklearn.model_selection import train_test_split

# NOTE: Make sure that the outcome column is labeled 'target' in the data file
tpot_data = pd.read_csv('PATH/TO/DATA/FILE', sep='COLUMN_SEPARATOR', dtype=np.float64)
features = tpot_data.drop('target', axis=1)
training_features, testing_features, training_target, testing_target = \
            train_test_split(features, tpot_data['target'], random_state=None)

# Average CV score on the training set was: 0.9177777777777777
exported_pipeline = SGDClassifier(alpha=0.01, eta0=0.1, fit_intercept=True, l1_ratio=0.75, learning_rate=""invscaling"", loss=""log"", penalty=""elasticnet"", power_t=1.0)

exported_pipeline.fit(training_features, training_target)
results = exported_pipeline.predict(testing_features)
"
2,dbworld-bodies,61.02m,TPOT,TPOT,0.936740890688259,0.9375,"(64, 4702)","import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import MaxAbsScaler

# NOTE: Make sure that the outcome column is labeled 'target' in the data file
tpot_data = pd.read_csv('PATH/TO/DATA/FILE', sep='COLUMN_SEPARATOR', dtype=np.float64)
features = tpot_data.drop('target', axis=1)
training_features, testing_features, training_target, testing_target = \
            train_test_split(features, tpot_data['target'], random_state=None)

# Average CV score on the training set was: 0.9377777777777776
exported_pipeline = make_pipeline(
    MaxAbsScaler(),
    MLPClassifier(alpha=0.01, learning_rate_init=0.1)
)

exported_pipeline.fit(training_features, training_target)
results = exported_pipeline.predict(testing_features)
"
