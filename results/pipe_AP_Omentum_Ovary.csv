,Dataset,Time,Preprocessing,AutoML,Accuracy,F1,Shape,PipeLine
0,AP_Omentum_Ovary,64.17m,AutoFeat,TPOT,0.8393410132540567,0.8405797101449275,"(275, 13)","import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import LinearSVC

# NOTE: Make sure that the outcome column is labeled 'target' in the data file
tpot_data = pd.read_csv('PATH/TO/DATA/FILE', sep='COLUMN_SEPARATOR', dtype=np.float64)
features = tpot_data.drop('target', axis=1)
training_features, testing_features, training_target, testing_target = \
            train_test_split(features, tpot_data['target'], random_state=None)

# Average CV score on the training set was: 0.9026713124274099
exported_pipeline = LinearSVC(C=15.0, dual=False, loss=""squared_hinge"", penalty=""l2"", tol=1e-05)

exported_pipeline.fit(training_features, training_target)
results = exported_pipeline.predict(testing_features)
"
1,AP_Omentum_Ovary,64.17m,None,TPOT,0.8198351804489912,0.8260869565217391,"(275, 10936)","import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

# NOTE: Make sure that the outcome column is labeled 'target' in the data file
tpot_data = pd.read_csv('PATH/TO/DATA/FILE', sep='COLUMN_SEPARATOR', dtype=np.float64)
features = tpot_data.drop('target', axis=1)
training_features, testing_features, training_target, testing_target = \
            train_test_split(features, tpot_data['target'], random_state=None)

# Average CV score on the training set was: 0.8548199767711961
exported_pipeline = RandomForestClassifier(bootstrap=False, criterion=""gini"", max_features=0.5, min_samples_leaf=3, min_samples_split=17, n_estimators=100)

exported_pipeline.fit(training_features, training_target)
results = exported_pipeline.predict(testing_features)
"
2,AP_Omentum_Ovary,64.17m,TPOT,TPOT,0.8241426467953844,0.8405797101449275,"(275, 10936)","import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

# NOTE: Make sure that the outcome column is labeled 'target' in the data file
tpot_data = pd.read_csv('PATH/TO/DATA/FILE', sep='COLUMN_SEPARATOR', dtype=np.float64)
features = tpot_data.drop('target', axis=1)
training_features, testing_features, training_target, testing_target = \
            train_test_split(features, tpot_data['target'], random_state=None)

# Average CV score on the training set was: 0.8403019744483158
exported_pipeline = RandomForestClassifier(bootstrap=False, criterion=""gini"", max_features=0.2, min_samples_leaf=3, min_samples_split=11, n_estimators=100)

exported_pipeline.fit(training_features, training_target)
results = exported_pipeline.predict(testing_features)
"
